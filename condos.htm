<!DOCTYPE html>
<html><head><title>Condos</title>
<meta charset="utf-8" />
<script id="fboShader" type="x-shader/x-fragment">
precision mediump float;
uniform sampler2D fbo;
uniform vec2 res;
uniform float time;
uniform float user;
uniform float key;
uniform vec3 mouse;
#define iTimeDelta user
//re-usable flight code
 
#define THRUST 0.04*iTimeDelta 
#define ROLL 1.0*iTimeDelta 
#define ROTATE 4.0*iTimeDelta 
#define TOO_CLOSE 0.01 
 
#define LEFT_ARROW 37 
#define UP_ARROW 38 
#define RIGHT_ARROW 39 
#define DOWN_ARROW 40 
 
//originally from iq but messed up by me 
float isInside( vec2 p, vec2 c ) { vec2 d = abs(p-0.5-c) - 0.5; return -max(d.x,d.y); } 
 
vec4 load(in int re) { 
    return texture2D(fbo, (0.5+vec2(re,0.0)) / res, -100.0 ); 
} 
 
void store( in int re, in vec4 va, inout vec4 fragColor, in vec2 fragCoord) { 
    fragColor = ( isInside(fragCoord,vec2(re,0.0)) > 0.0 ) ? va : fragColor; 
} 
 
bool KeyDown(in int iKey){return (float(iKey)==key);} 
 
//some quaterion math just to be different 
#define quat vec4 
quat qid(){return quat(0.0,0.0,0.0,1.0);} 
quat qmulq(quat q1, quat q2){//multiply two quats 
 return quat(q1.xyz*q2.w+q2.xyz*q1.w+cross(q1.xyz,q2.xyz),(q1.w*q2.w)-dot(q1.xyz,q2.xyz)); 
} 
quat aa2q(vec3 axis, float angle){return quat(normalize(axis)*sin(angle*0.5),cos(angle*0.5));} 
quat qinv(quat q){return quat(-q.xyz,q.w)/dot(q,q);}//inverse quaternion 
vec3 qmulv(quat q, vec3 p){quat qi=qinv(q),q2=quat(p*qi.w+cross(p,qi.xyz),-dot(p,qi.xyz));
return q.xyz*q2.w+q2.xyz*q.w+cross(q.xyz,q2.xyz);}
//vec3 qmulv(quat q, vec3 p){return qmulq(q,qmulq(quat(p,0.0),qinv(q))).xyz;}//rotate a vector 
quat qpyr(vec3 o){ o*=0.5; vec3 s=sin(o),c=cos(o); //rotate pitch,yaw,roll in that order 
 return quat(s.x*c.y*c.z+s.y*c.x*s.z, s.y*c.x*c.z-s.x*c.y*s.z, s.x*s.y*c.z+s.z*c.x*c.y, c.x*c.y*c.z-s.x*s.y*s.z); 
}

void mainImage( out vec4 fragColor, in vec2 fragCoord ) 
{ 
 if(fragCoord.y>0.5 || fragCoord.x>1.5)discard; 
 vec4 pos; 
 quat qrot; 
 if(time<2.){ 
  pos=vec4(0.1,0.5,0.0,0.01); 
  qrot=normalize(vec4(0.1,0.2,0.3,0.8)); 
 }else{ 
  pos=load(0); 
  qrot=load(1); 
  vec3 fw=vec3(0.0,0.0,1.0); 
  fw=qmulv(qrot,fw); 
  vec3 newp=pos.xyz+fw*pos.w; 
  if(newp.y>-1.3)pos.xyz=newp; 
  else{ pos.xz=newp.xz;} //keep above ground
  if(KeyDown(UP_ARROW))pos.w+=THRUST; 
  if(KeyDown(DOWN_ARROW))pos.w-=THRUST; 
  float roll=0.0; 
  if(KeyDown(LEFT_ARROW))roll-=ROLL; 
  if(KeyDown(RIGHT_ARROW))roll+=ROLL; 
  vec2 mous=vec2(0.0); 
  if(mouse.z>0.0){ 
   mous.xy=mouse.xy-vec2(.5); mous.xy*=sign(mous.xy)*mous.xy;
  }
  qrot*=vec4(0.99,1.0,0.99,1.0);//nice little trick to stabilize the flight 
  //x and z rotations go to zero and the quaternian is normalized later  
  quat qp=qpyr(vec3(-mous.y*ROTATE,mous.x*ROTATE,roll));//finally did the math!! 
  qrot=normalize(qmulq(qrot,qp));//normalize before saving 
 }
 store(0,pos,fragColor,fragCoord);//position,velocity 
 store(1,qrot,fragColor,fragCoord);//rotation 
}
void main(){mainImage(gl_FragColor,gl_FragCoord.xy);}
</script>
<script id="fragShader" type="x-shader/x-fragment">
precision mediump float;
uniform sampler2D fbo;
uniform vec2 res;
uniform float time;
#define size res
#define iTime time
vec2 rep(vec2 p, vec2 a){return abs(mod(p+a,a*2.0)-a);}

vec4 mcol=vec4(0.0);
float DE(vec3 z0){
 vec3 scol;
 z0.xz=rep(z0.xz,vec2(4.25,4.25)); 
 float dB=min(z0.y+1.41,max(min(abs(z0.x-3.16),abs(z0.z-1.46))-0.25,abs(z0.y-0.38)-0.02)); 
 vec4 z = vec4(z0,1.0),c=vec4(0.0,1.0,0.66,0.0);//amazing surface/box thnx to kali/tglad 
 float dS=1000.0; 
 for (int n = 0; n < 3; n++) { 
  z.xz=clamp(z.xz, -1.0, 1.0) *2.0-z.xz; 
  z*=2.0/clamp(dot(z.xyz,z.xyz),0.75,1.37); 
  z+=c; 
  dS=min(dS,(length(max(abs(z.xyz)-vec3(0.82,2.83,0.82),0.0))-0.33)/z.w); 
 } 
 float dG=dS+0.037;//interior is glass
 if(mcol.z>0.0){//save for coloring
   c=floor(z*2.5);
   scol=vec3(0.6+abs(fract(z.x*z.y*0.5)*0.4-0.2));
 } 
 z.xyz=abs(mod(z.xyz,0.4)-0.2); 
 dS=max(dS,-max(z.y-0.16,min(z.x,z.z)-0.15)/z.w);//cut out windows 
 if(mcol.z>0.0){//now the coloring 
  if(dS<dB && dS<dG){ 
   z*=200.0; 
   dS+=sin(z.x+2.4*sin(z.y+2.4*sin(z.z)))*0.00005; 
   mcol+=vec4(scol*vec3(1.0,0.9,0.7),1.0); 
  }else if(dB<dG){ 
   float d=0.1; 
   if(min(abs(z0.x-3.16),abs(z0.z-1.46))-0.24>0.0 && fract((z0.x+z0.z)*10.0)>0.5)d=1.0; 
   mcol+=vec4(d,d,0.2,32.0); 
  }else{ 
   float spec=1.0; 
   if(sin((1.0+iTime*0.01)*(4.0*c.x-c.y+3.0*c.z))<-0.8)spec=-1.0; 
   mcol+=vec4(0.3,0.4+fract((c.x+c.z-c.y)*0.32454213)*0.3,0.5,spec);   
  }
 } 
 dS=(abs(min(dS,dG))-0.002)*0.8; 
 return max(0.0,min(dS,dB)); 
} 
 
float rnd; 
float ShadAO(vec3 ro, vec3 rd){ 
 float res=1.0,t=0.0; 
 for(int i=0;i<24;i++){ 
  float d=abs(DE(ro+rd*t)); 
  res=min(res,2.0*d/t+t*0.1); 
  t+=d; 
 } 
 return clamp(res+0.1,0.0,1.0); 
} 
vec3 light_dir,light_col=vec3(1.0,0.9,0.6); 
vec3 Light(vec3 so, vec3 rd, float t, float dist){
 float px=t*1.66/size.y;
 so+=rd*(dist-px);
 mcol=vec4(0.01);
 float d=DE(so);
 vec2 v=vec2(px,0.0);//px is pixelSize*t
 vec3 dn=vec3(DE(so-v.xyy),DE(so-v.yxy),DE(so-v.yyx));
 vec3 dp=vec3(DE(so+v.xyy),DE(so+v.yxy),DE(so+v.yyx));
 vec3 norm=(dp-dn)/(length(dp-vec3(d))+length(vec3(d)-dn));
 if(norm!=norm)norm=rd;
 vec4 scol=mcol*0.143;mcol=vec4(0.0);
 float shad=ShadAO(so+norm*(0.002+rnd*0.001),light_dir);
 float camLightStrength=exp(-t);
 if(scol.w<-0.75)shad=-4.0*(scol.w+0.75);
 if(scol.w<0.0)scol.w=10.0;
 vec3 R=reflect(rd,norm);
 float dif=max(max(0.0,camLightStrength*dot(norm,-rd)),dot(norm,light_dir));
 float spec=dot(light_dir,R);
 vec3 diffuse_col=scol.rgb+vec3(0.12,0.05,-0.125)*spec;
 dif=min(dif,shad);
 spec=min(pow(max(0.0,spec),scol.w),shad);
 return diffuse_col*dif*1.5+light_col*spec+vec3(0.5,0.7,0.9)*pow(max(0.0,dot(R,-rd)),10.0)*camLightStrength;
}

vec3 getBackGround(vec3 rd){return light_col*max(0.0,rd.y);}
#define quat vec4 
quat qid(){return quat(0.0,0.0,0.0,1.0);} 
quat qmulq(quat q1, quat q2){//multiply two quats 
 return quat(q1.xyz*q2.w+q2.xyz*q1.w+cross(q1.xyz,q2.xyz),(q1.w*q2.w)-dot(q1.xyz,q2.xyz)); 
} 
quat qinv(quat q){return quat(-q.xyz,q.w)/dot(q,q);}//inverse quaternion 
vec3 qmulv(quat q, vec3 p){quat qi=qinv(q),q2=quat(p*qi.w+cross(p,qi.xyz),-dot(p,qi.xyz));
return q.xyz*q2.w+q2.xyz*q.w+cross(q.xyz,q2.xyz);}
//vec3 qmulv(quat q, vec3 p){return qmulq(q,qmulq(quat(p,0.0),qinv(q))).xyz;}//rotate a vector 
vec4 load(in int re) { 
 return texture2D(fbo, (0.5+vec2(re,0.0)) / res, -100.0 ); 
}
void mainImage(out vec4 O, in vec2 U){
 light_dir=normalize(vec3(0.2,0.7,0.25));
 float px=1.66/size.y,ptim=iTime*0.25;  
 vec3 rd=normalize(vec3((2.0*U-size.xy)/size.x,1.0)); 
 vec3 ro=load(0).xyz; 
 quat fw=load(1); 
 rd=qmulv(fw,rd);
 vec2 co=gl_FragCoord.xy-17.0*vec2(fract(iTime*0.66)); 
 rnd=fract(sin(co.x+cos(co.y))*4317.6219);
 float t=DE(ro)*(0.5+0.5*rnd); 
 float d,pd=10.0,step,dm=100.0,tm,de=100.0,te=0.0;  
 for(int i=0;i<128;i++){ 
  d=DE(ro+rd*t); 
  if(de==100.0 && d>pd && pd<px*(t-step)){de=pd;te=t-step;} 
  step=d; 
  if(d<dm){dm=d;tm=t;}//save max occluder  
  t+=step; 
  pd=d;
  if(t>100.0 || d<0.000001)break;
 }
 vec3 col=getBackGround(rd);
 if(dm<px*tm)col=mix(Light(ro+rd*tm,rd,tm,dm)*exp(-tm*0.02),col,clamp(dm/(px*tm),0.0,1.0)); 
 if(de<px*te)col=mix(Light(ro+rd*te,rd,te,de)*exp(-te*0.02),col,clamp(de/(px*te),0.0,1.0)); 
 //fog from marius' boxplorer
    float fog3 = 0.1;  // higher = thicker 
    float fogFalloff3 = 0.01;  // higher = closer 
    vec3 backgroundColor3 = vec3(0.8, 0.8, 0.8);  
    col= mix(mix(backgroundColor3,col*0.5,abs(rd.y)), col, clamp(exp(-pow(t * exp(fogFalloff3), 1.0) * fog3),0.0,1.0));  
 O=vec4(col,1.0);
}
void main(){mainImage(gl_FragColor,gl_FragCoord.xy);}
</script>
<script src="WAG.js"></script>
<script>
let lt=0.;
function frame(){//implementing a delta time uniform
  G.u.user=G.u.time-Math.max(lt,0.001);//delta time
  lt=G.u.time;
}
function setup(){
  G("glcanvas","fragShader",{fboScript:"fboShader",onFrame:frame});
}
</script></head>
<body onload="setup();" bgcolor="gainsboro" style="font-family:sans-serif;">
<div style="touch-action: none;">
<canvas id="glcanvas" width="512" height="320"></canvas></div>
<br><button onclick='togglePause();if(G.paused)this.textContent="Resume";else this.textContent="Pause";'>Pause</button>
<button onclick='fullScreen(document.getElementById("glcanvas"));'>Full Screen</button>
</body>
</html>
