<!DOCTYPE html>
<html><head><title>Angry Bee</title>
<meta charset="utf-8" />
<script id="fragShader" type="x-shader/x-fragment">
precision mediump float;
uniform vec2 res;
uniform float time;
uniform float user;
uniform float key;
uniform vec3 mouse;
uniform vec3 B1;
uniform vec3 B2;

float tube(vec3 pa, vec3 ba){
  float T=clamp(dot(pa,ba)/dot(ba,ba),0.0,1.0);
  return length(pa-ba*T)-.05-.005*T;
}
vec3 mcol=vec3(0);
float w=1.;
float DE(vec3 p){
  float d=tube(p-B2,B1-B2);
  p-=(B1+B2)/2.;
  if(mcol.x>0.){
    mcol+=vec3(1.,.5,0.)*abs(cos(p.z*300.)*.125+p.z*16.);
  }
  p.x=abs(p.x);
  p.y+=sin(time*100.)*p.x*.5;
  p.x-=.125;
  w=min(w,length(p*vec3(8.,100.,8.)));
  d=min(d,w/8.+.001);
  return d; 
}
float face(vec2 p){
  p.x=abs(p.x);
  float d=max(abs(p.y+.02)*2.,p.x-.02);
  d=min(d,length(p-vec2(.02)));
  return clamp(d*50.,0.,1.);
}
void main(){
  float rnd=fract(sin(dot(gl_FragCoord.xy,vec2(113.421,71.3149)))*123.23);
  vec3 rd=normalize(vec3(2.*gl_FragCoord.xy-res,res.y));
  vec4 O=vec4(.4,.6,.9,1.)+vec4(rd*.1,0.);
  float t=rnd*DE(vec3(0)),d,px=3./res.y;
  for(int i=0;i<16;i++){
    t+=d=DE(rd*t);
    if(t>2. || d<px*t);
  }
  if(d<px*t){
    mcol.x=.001;
    d=max(d,0.0001);
    vec3 p=rd*(t-d),up=vec3(0,1,0),rt=vec3(1,0,0);
    vec3 N=normalize(-rd*d+up*(DE(p+up*d)-d)+rt*(DE(p+rt*d)-d));
    mcol*=dot(N,-rd);
    O.rgb=mix(mcol*face((p-B1).xy),O.rgb,clamp(d/(px*t),0.,1.));
  }
  gl_FragColor=O*(.75+.25*w);
}
</script>
<script src="WAG.js"></script>
<script>
let U={B1:V.c3(0.),B2:V.c3(0.)};
var rp=null;//an object returned from plAy() that contains source and pan
function path(a){return V.fnc(V.mlc(new V(1.,.91,.73),a),Math.sin);}
function frame(){if(!rp)return;//we use it to see if sound is activated
  let a=G.u.time*2.;
  V.cpy(U.B1,path(a));
  a-=.03;
  V.cpy(U.B2,path(a));
  rp.pan.positionX.value=U.B1.x*20.; //and to control the 3D pan settings
  rp.pan.positionY.value=U.B1.y*20.;   
  rp.pan.positionZ.value=U.B1.z*20.;
  let d1=V.dot(U.B1,U.B1);
  let d2=V.dot(U.B2,U.B2);
  let d=1.+d1-d2;
  rp.source.playbackRate.value=d;
}
function amp(k){return .5-((230.*k/48000.)%1.);}
function startSound(){
  rp=plAy(0,{loop:true,pan:"3D"});
}
function setup(){
  G("glcanvas","fragShader",{onFrame:frame,fps:60,uniform:U});
  togglePause(); //should always toggle pause when playing audio to require gesture
  A([{samps:48000,fill:amp,sampleRate:48000}]);
}
</script></head>
<body onload="setup();htmlbx.value=document.documentElement.innerHTML;" bgcolor="gainsboro" style="font-family:sans-serif;">
<b>Angry Bee</b>
<table><tr valign="top"><td>
<div style="touch-action: none;">
<canvas id="glcanvas" width="512" height="320"></canvas></div>
<button onclick='togglePause();if(!rp)startSound();'>On/Off</button>
<button onclick='fullScreen(document.getElementById("glcanvas"));'>Full Screen</button>
</td><td>
There's a bee by your head. He sounds angry. I think he's mad they took
doppler effect out of the WebAudio spec.<br>
This is a simple example of using the 3D listener to position sounds.
The delta of the lengths from camera to bee head minus camera to bee butt 
gives us an approximate velocity with respect to the listener for a doppler effect.
<br><br>When the sound effect is created we make sure to set the sampleRate
so our bee flaps at 230 beats per second no matter what the browser's
playback rate is. Then we activate the 3D listener with the pan:"3D" setting
and set the returned object's pan.position to the sound source (bee). We
hold the bee's position B1 in the uniform object U which is sent to the shader.
</td></tr></table>
<textarea id="htmlbx" cols="80" rows="15" wrap="off"  spellcheck="false"
 style="font-family: Lucida Console;"></textarea>
</body></html>
